import java_cup.runtime.*;
import java.io.*;
import java.util.Scanner;

parser code {:
	public static void main(String args[]) throws Exception {
		System.out.print("Podaj nazwe pliku: ");
		Scanner scanner = new Scanner(System.in);
		String filename = scanner.next();
		scanner.close();

		FileInputStream stream = new java.io.FileInputStream(filename);
		Reader reader = new java.io.InputStreamReader(stream);

		try {
			new parser(new Yylex(reader)).parse();
		}
		catch (Exception e) {
			System.err.println("ERROR Analisis INCORRECTO !");
			System.exit(1);
		}
		System.out.println("Analisis CORRECTO");
	}
:}


terminal SEMICOLON, COMMA, // ; ,
	PAREN_L, PAREN_R, // ( )
	BRAC_L, BRAC_R, // { }
	ASSIGN, // =
	UMINUS, // -123
	T_VOID, T_BOOL, T_INT, // types
	RETURN, WHILE, FOR, CLASS, STATIC, PUBLIC, // functional
	PLUS, MINUS, MUL, DIV, // aritmethitical
	GREATER, G_EQUAL, LESS, L_EQUAL, EQUAL, NOT_EQUAL, // relational
	AND, OR, NOT; // logical
terminal String IDENT;
terminal Integer NUMBER;
terminal boolean FLAG;

non terminal compound, cmd, expr_part, expr_list;
non terminal var_expr, var_assign, var_def, func_call, func_args, arg;
non terminal math_i, math_expr;
non terminal func_dec, class_dec, loop;

precedence left PLUS, MINUS;
precedence left MUL, DIV;
precedence left UMINUS;

expr_list ::= expr_list expr_part | expr_part;
expr_part ::= cmd SEMICOLON
	| compound BRAC_L expr_part BRAC_R;

cmd ::= var_def | var_assign | func_call;

compound ::= class_dec | func_dec | loop;

var_def ::= T_BOOL IDENT | T_INT IDENT;
math_i ::= NUMBER | func_call | VARIABLE;
math_expr ::= PAREN_L math_i PAREN_R
	| math_i PLUS math_expr
	| math_i MINUS math_expr
	| math_i MUL math_expr
	| math_i DIV math_expr
	| UMINUS math_i
	| math_i;
var_expr ::= PAREN_L var_expr PAREN_R | math_expr | UMINUS math_expr;
var_assign ::= IDENT ASSIGN var_expr | var_def ASSIGN var_expr;

func_call ::= T_VOID IDENT PAREN_L func_args PAREN_R
	| T_BOOL IDENT PAREN_L func_args PAREN_R
	| T_INT IDENT PAREN_L func_args PAREN_R;
func_args ::= arg COMMA func_args | arg | ;
arg ::= T_VOID | T_VOID IDENT | T_BOOL IDENT | T_INT IDENT;

class_dec ::= ;
func_dec ::= ;
loop ::= ;
